#ifndef BINARYSEARCHTREE_H
#define BINARYSEARCHTREE_H
#include<iostream>
using namespace std;
template<typename Comparable>
class BinarySearchTree{
    public:
        BinarySearchTree();
        BinarySearchTree(const BinarySearchTree & rhs);
        ~BinarySearchTree();

        const Comparable& findMin() const;
        const Comparable& findMax() const;
        bool contains(const Comparable& data) const;
        bool isEmpty() const;
        void printTree() const;
        void makeEmpty();
        void insert(const Comparable& data);
        void remove(const Comparable& data);

        const BinarySearchTree& operator=(const BinarySearchTree & rhs);

    private:
        struct BinaryNode{
             Comparable data;
             BinaryNode* left;
             BinaryNode* right;

             BinaryNode(const Comparable& theData, BinaryNode& lt, BinaryNode* rt)
                 :data(theData),left(lt),right(rt){}
        };

        BinaryNode* root;
        void insert(const Comparable& data, BinaryNode * & t) const;
        void remove(const Comparable& data, BinaryNode * & t) const;
        BinaryNode* findMin(BinaryNode * t) const;
        BinaryNode* findMax(BinaryNode * t) const;
        bool contains(const Comparable& x, BinaryNode* t) const;
        void makeEmpty(BinaryNode*& t) ;
        void printTree(BinaryNode* t) const;
        BinaryNode* clone(BinaryNode* t) const;
}


bool BinarySearchTree::contains(const Comparable&x, BinaryNode* t) const{
    if(t == NULL)
        return false;
    else if(x < t->data)
        return contains(x,t->left);
    else if(x > t->data)
        return contains(x,t->right);
    else
        return true;
}

bool BinarySearchTree::contains(const Comparable& x) const{
     return contains(x,root);
}

BinaryNode* BinarySearchTree::findMin(BinaryNode* t) const{
    if(t==NULL)
        return NULL;
    if(t->left == NULL)
        return t->left;
    return findMin(t->left);
}

BinaryNode* BinarySearchTree::findMax(BinaryNode* t) const{
    if(t!= NULL){
        while(t->right != NULL)
            t = t->right;
    }
    return t;
}

const Comparable& BinarySearchTree::findMin() const{
     return findMin(root)->data;
}


const Comparable& BinarySearchTree::findMax() const{
     return findMax(root)->data;
}

void








#endif
